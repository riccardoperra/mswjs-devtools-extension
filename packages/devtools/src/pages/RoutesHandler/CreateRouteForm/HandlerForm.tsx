import { StatusCodes } from "../status";
import { ExclamationTriangleIcon } from "../../../components/ExclamationTriangleIcon";
import { CheckIcon } from "../../../components/CheckIcon";
import { getCreateRouteHandlerForm } from "./createHandlerForm";
import {
  createSignal,
  ErrorBoundary,
  lazy,
  Match,
  Show,
  Suspense,
  Switch,
} from "solid-js";
import { LockIcon } from "../../../components/LockIcon";
import { PlusIcon } from "../../../components/PlusIcon";
import { Button, createSelectOptions, Select, TextField } from "@codeui/kit";

const JsonEditor = lazy(() =>
  import("../../../components/JsonEditor/JsonEditor").then((m) => ({
    default: m.JsonEditor,
  })),
);

export function HandlerForm() {
  const form = getCreateRouteHandlerForm();
  const [routeTab] = createSignal(0);

  const selectOptions = createSelectOptions(StatusCodes, {
    key: "label",
    valueKey: "value",
  });

  return (
    <>
      <Switch>
        <Match when={routeTab() === 0}>
          <div
            class={
              "px-4 py-2 flex gap-2 bg-neutral-900 shadow rounded-tl-lg rounded-tr-lg"
            }
          >
            <div class="form-control flex-row items-center gap-2">
              <label class="label">
                <span class="label-text">Status</span>
              </label>
              <div class={"w-[300px]"}>
                <Select
                  {...selectOptions.props()}
                  {...selectOptions.controlled(
                    () => form.handler.status,
                    (selected) => form.setHandler("status", selected ?? 200),
                  )}
                  multiple={false}
                  aria-label={"Response status"}
                  options={selectOptions.options()}
                  size={"sm"}
                />
              </div>
            </div>

            <div class="form-control flex-row items-center gap-2">
              <label class="label">
                <span class="label-text">Description</span>
              </label>
              <div class={"min-w-[400px]"}>
                <TextField
                  placeholder="Description"
                  disabled={form.handler.origin === "msw"}
                  value={form.handler.description}
                  onChange={(value) => form.setHandler("description", value)}
                />
              </div>
            </div>

            <div class="form-control flex-row items-center gap-2">
              <label class="label">
                <span class="label-text">Delay (ms)</span>
              </label>
              <div class={"w-[150px]"}>
                <TextField
                  ref={(el) =>
                    setTimeout(() => {
                      // TODO: add type number field
                      el.type = "number";
                      el.min = "0";
                    })
                  }
                  placeholder="Description"
                  disabled={form.handler.origin === "msw"}
                  value={String(form.handler.delay)}
                  onChange={(value) =>
                    form.setHandler("delay", parseInt(value ?? 0))
                  }
                />
              </div>
            </div>
          </div>

          <div
            class={
              "px-4 border-y border-opacity-20 border-base-content flex items-center"
            }
          >
            <label class="label">
              <span class="label-text">Response body</span>
            </label>
            <div class={"ml-auto"}>
              <Show
                fallback={
                  <span class={"text-yellow-500"}>
                    <ExclamationTriangleIcon />
                  </span>
                }
                when={form.isValid}
                keyed={false}
              >
                <span class={"text-green-500"}>
                  <CheckIcon />
                </span>
              </Show>
            </div>
          </div>
          <div class={"d-flex h-full relative"}>
            <ErrorBoundary fallback={(e) => <div>{e}</div>}>
              <Suspense>
                <div class={"absolute w-full h-full"}>
                  <Show
                    fallback={
                      <div
                        class={
                          "bg-base-100 flex flex-col items-center justify-center w-full h-full gap-4"
                        }
                      >
                        <LockIcon class={"w-16 h-16 "} />
                        <span class={"text-2xl"}>
                          Cannot update response handler generated by MSW.
                        </span>
                        <div class={"text-info"}>
                          In order to change the response, create a new response
                          custom handler
                        </div>

                        <Button
                          theme={"primary"}
                          size={"sm"}
                          leftIcon={<PlusIcon />}
                          onClick={() => form.addNewHandler()}
                        >
                          Create handler
                        </Button>
                      </div>
                    }
                    when={form.handler.origin !== "msw"}
                  >
                    <JsonEditor
                      disabled={form.handler.origin === "msw"}
                      value={form.handler.response}
                      onSave={form.formatJson}
                      onValueChange={(value) =>
                        form.setHandler("response", value)
                      }
                    />
                  </Show>
                </div>
              </Suspense>
            </ErrorBoundary>
          </div>
        </Match>
      </Switch>
    </>
  );
}
